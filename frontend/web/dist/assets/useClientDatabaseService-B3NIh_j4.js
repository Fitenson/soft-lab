import{h as u}from"./serviceHandler-BlQljMi1.js";import{u as f}from"./useRequest-w8ljcJHi.js";import{a5 as T}from"./main-B9kSPlih.js";import{B as v}from"./BaseEntity-DGhPHkWu.js";import{C as d}from"./ClientDatabaseViewModel-CZz8IN5P.js";const S=["UUID","host","port","databaseName","databaseSchema","username","password","project","valid"];function C(a,e){return T(a,S,e,"clientDatabase")}class m extends v{_UUID;_databaseName;_databaseSchema;_refreshToken;_host;_port;_username;_password;_project;_valid;constructor(e){super(e),this._UUID=e.UUID??"",this._databaseName=e.databaseName??"",this._databaseSchema=e.databaseSchema??"",this._refreshToken=e.refreshToken??"",this._host=e.host??"",this._port=e.port??"",this._username=e.username??"",this._password=e.password??"",this._project=e.project??"",this._valid=e.valid??!0}asViewModel(){return new d(this.asDto())}get UUID(){return this._UUID}set UUID(e){this._UUID=e}get databaseName(){return this._databaseName}set databaseName(e){this._databaseName=e}get databaseSchema(){return this._databaseSchema}set databaseSchema(e){this._databaseSchema=e}get refreshToken(){return this._refreshToken}set refreshToken(e){this._refreshToken=e}get host(){return this._host}set host(e){this._host=e}get port(){return this._port}set port(e){this._port=e}get username(){return this._username}set username(e){this._username=e}get password(){return this._password}set password(e){this._password=e}get project(){return this._project}set project(e){this._project=e}get valid(){return this._valid}set valid(e){this._valid=e}}const U=()=>{const{request:a}=f();return{indexClientDatabase:async()=>await a({url:"client-database/index",method:"GET"}),createClientDatabase:async s=>{const o=s.asDto(),r=C(o,new FormData),b=(await a({url:"/client-database/create",method:"POST",data:r})).clientDatabase;return new m(b)},updateClientDatabase:async s=>{const o=s.asDto(),r=C(o,new FormData),b=(await a({url:`/client-database/update?id=${o.UUID}`,method:"POST",data:r})).clientDatabase;return new m(b)},removeClientDatabase:async s=>{const o=new FormData;return s.forEach(r=>{o.append("UUIDs[]",r)}),await a({url:"/client-database/remove",method:"POST",data:o})},connectClientDatabase:async s=>await a({url:`/client-database/connect?id=${s}`,method:"GET"}),getTableList:async({params:s,clientDatabaseToken:o})=>{const r=new FormData;return r.append("param[offset]",s.offset),r.append("param[limit]",s.limit),r.append("param[sort]",s.sort),r.append("param[order]",s.order),await a({url:"/client-database/get-table-list",method:"POST",data:r,headers:{"X-Client-Database-Token":o}})}}};class x{_table;_columns;constructor(e){this._table=e.table,this._columns=e.columns?.map(h=>new M(h))}get table(){return this._table}get columns(){return this._columns??[]}}class M{_field;_type;_collation;_null;_key;_default;_extra;_privileges;_comment;_dto;constructor(e){this._dto=e,this._field=e.field,this._type=e.type,this._collation=e.collation,this._default=e.default,this._extra=e.extra,this._privileges=e.privileges,this._comment=e.comment,this._null=e.null,this._key=e.key}get field(){return this._field}get type(){return this._type}get collation(){return this._collation}get null(){return this._null}get key(){return this._key}get default(){return this._default}get extra(){return this._extra}get privileges(){return this._privileges}get comment(){return this._comment}get dto(){return this._dto}}const R=()=>{const{indexClientDatabase:a,createClientDatabase:e,updateClientDatabase:h,removeClientDatabase:_,connectClientDatabase:p,getTableList:D}=U();return{indexClientDatabase:async i=>u(async()=>{const t=await a(),n=t.rows.map(c=>new d(c));return{...t,rows:n}},i),createClientDatabase:async(i,t)=>{let n=new m(i);return n=await u(async()=>e(n),{...t,onSuccess:c=>{const l=c.asViewModel();t?.onSuccess?.(l)}}),n.asViewModel()},updateClientDatabase:async(i,t)=>{let n=new m(i);return n=await u(async()=>h(n),{...t,onSuccess:c=>{const l=c.asViewModel();t?.onSuccess?.(l)}}),n.asViewModel()},removeClientDatabase:async(i,t)=>await u(async()=>_(i),t),connectClientDatabase:async(i,t)=>{const n=await u(async()=>p(i),{...t,onSuccess:c=>{const l=new d(c);t?.onSuccess?.(l)}});return new d(n)},getTableList:async({params:i,clientDatabaseToken:t},{callbacks:n})=>u(async()=>{const c=await D({params:i,clientDatabaseToken:t}),l=c.rows.map(y=>new x(y));return{...c,rows:l}},n)}};export{R as u};
