import{u as w}from"./useRequest-CZQ9oKgI.js";import{a2 as y}from"./main-CRC8HOaX.js";import{B as U}from"./BaseEntity-DGhPHkWu.js";import{a as j,A as b}from"./ApiTestViewModel-BZncyWgE.js";import{h as D}from"./serviceHandler-BlQljMi1.js";import{C as g}from"./ClientDatabaseViewModel-CZz8IN5P.js";const I=["UUID","parentApiTest","clientDatabase","project","testName","transmission","description","isFolder","moreDescription"];function m(s,t){return y(s,I,t,"apiTest")}class f extends U{_UUID;_apiTest;_key;_value;_description;_enabled;_fieldType;_apiTestDataDTO;constructor(t){super(t),this._UUID=t.UUID??"",this._apiTest=t.apiTest??"",this._key=t.key??"",this._value=t.value??"",this._description=t.description??"",this._enabled=t.enabled??1,this._fieldType=t.fieldType??"",this._apiTestDataDTO=t}asViewModel(){return new j(this.asDto())}get UUID(){return this._UUID}set UUID(t){this._UUID=t}get apiTest(){return this._apiTest}set apiTest(t){this._apiTest=t}get key(){return this._key}set key(t){this._key=t}get value(){return this._value}set value(t){this._value=t}get description(){return this._description}set description(t){this._description=t}get enabled(){return this._enabled}set enabled(t){this._enabled=t}get fieldType(){return this._fieldType}set fieldType(t){this._fieldType=t}get apiTestDataDTO(){return this._apiTestDataDTO}set apiTestDataDTO(t){this._apiTestDataDTO=t}}class _ extends U{_UUID;_parentApiTest;_clientDatabase;_project;_testName;_isFolder;_transmission;_description;_moreDescription;_apiTestData;_apiTests;constructor(t){super(t),this._UUID=t.UUID??"",this._parentApiTest=t.parentApiTest??"",this._clientDatabase=t.clientDatabase??"",this._project=t.project??"",this._testName=t.testName??"",this._isFolder=Number(t.isFolder??0),this._transmission=t.transmission??"",this._description=t.description??"",this._moreDescription=t.moreDescription??"",this._apiTestData={total:t.apiTestData?.total??"0",rows:(t.apiTestData?.rows??[]).map(r=>new f(r))},this._apiTests=(t.apiTests??[]).map(r=>new _(r))}asViewModel(){return new b(this.asDto())}get UUID(){return this._UUID}set UUID(t){this._UUID=t}get parentApiTest(){return this._parentApiTest}set parentApiTest(t){this._parentApiTest=t}get clientDatabase(){return this._clientDatabase}set clientDatabase(t){this._clientDatabase=t}get project(){return this._project}set project(t){this._project=t}get testName(){return this._testName}set testName(t){this._testName=t}get transmission(){return this._transmission}set transmission(t){this._transmission=t}get description(){return this._description}set description(t){this._description=t}get moreDescription(){return this._moreDescription}set moreDescription(t){this._moreDescription=t}get isFolder(){return this._isFolder}set isFolder(t){this._isFolder=t}get apiTests(){return this._apiTests}set apiTests(t){this._apiTests=t}get apiTestData(){return this._apiTestData}set apiTestData(t){this._apiTestData=t}}const v=()=>{const{request:s}=w();return{listProjects:async()=>s({url:"/api-test/list-projects",method:"GET"}),indexApiTest:async()=>s({url:"/api-test/index",method:"GET"}),createApiTest:async(c,n)=>{const T=c.asDto(),u=m(T,new FormData),i=(await s({url:"/api-test/create",method:"POST",data:u,headers:{"X-Client-Database-Token":n}})).apiTest;return new _(i)},updateApiTest:async c=>{const n=c.asDto(),T=m(n,new FormData),e=(await s({url:`/api-test/update?id=${n.UUID}`,method:"POST",data:T})).apiTest;return new _(e)},removeApiTest:async c=>{const n=new FormData;return c.forEach(T=>{n.append("UUIDs[]",T)}),await s({url:"/api-test/remove",method:"POST",data:n})}}};class N{_UUID;_projectCode;_projectName;_clientDatabases;constructor(t,r){this._UUID=t?.UUID??"",this._projectCode=t?.projectCode??"",this._projectName=t?.projectName??"",this._clientDatabases=r}get UUID(){return this._UUID}get projectCode(){return this._projectCode}get projectName(){return this._projectName}get clientDatabases(){return this._clientDatabases}}const P=()=>{const{listProjects:s,indexApiTest:t,createApiTest:r,updateApiTest:d,removeApiTest:l}=v();return{listProjects:async e=>D(async()=>{const i=await s(),o=i.rows.map(a=>{const p=a.clientDatabases.map(h=>new g(h));return new N(a,p)});return{...i,rows:o}},e),indexApiTest:async e=>D(async()=>await t(),e),createApiTest:async(e,i,o)=>{let a=new _(e);return a=await D(async()=>r(a,i),{onSuccess:p=>{const h=p.asViewModel();o?.onSuccess?.(h)},onError:p=>{o?.onError?.(p)}}),a.asViewModel()},updateApiTest:async(e,i)=>{let o=new _(e);return o=await D(async()=>d(o),{onSuccess:a=>{const p=a.asViewModel();i?.onSuccess?.(p)},onError:a=>{i?.onError?.(a)}}),o.asViewModel()},removeApiTest:async(e,i)=>await D(async()=>l(e),i)}};export{P as u};
