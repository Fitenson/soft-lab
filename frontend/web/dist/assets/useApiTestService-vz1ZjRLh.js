import{u as U}from"./useRequest-D7yC7IBz.js";import{_ as j}from"./main-DnMLoToh.js";import{B as y}from"./BaseEntity-DGhPHkWu.js";import{A as d}from"./ApiTestViewModel-iD7rjxd2.js";import{h as u}from"./serviceHandler-BlQljMi1.js";import{C as b}from"./ClientDatabaseViewModel-DgDoSkZt.js";const g=["UUID","parentApiTest","clientDatabase","project","testName","transmission","description","isFolder","moreDescription","data","output","scenario"];function m(r,t){return j(r,g,t,"apiTest")}class c extends y{_UUID;_parentApiTest;_clientDatabase;_project;_testName;_isFolder;_transmission;_description;_moreDescription;_data;_output;_scenario;_apiTests;constructor(t){super(t),this._UUID=t.UUID??"",this._parentApiTest=t.parentApiTest??"",this._clientDatabase=t.clientDatabase??"",this._project=t.project??"",this._testName=t.testName??"",this._isFolder=t.isFolder??!1,this._transmission=t.transmission??"",this._description=t.description??"",this._moreDescription=t.moreDescription??"",this._data=t.data??"",this._output=t.output??"",this._scenario=t.scenario??"",this._apiTests=(t.apiTests??[]).map(n=>new c(n))}asViewModel(){return new d(this.asDto())}get UUID(){return this._UUID}set UUID(t){this._UUID=t}get parentApiTest(){return this._parentApiTest}set parentApiTest(t){this._parentApiTest=t}get clientDatabase(){return this._clientDatabase}set clientDatabase(t){this._clientDatabase=t}get project(){return this._project}set project(t){this._project=t}get testName(){return this._testName}set testName(t){this._testName=t}get transmission(){return this._transmission}set transmission(t){this._transmission=t}get description(){return this._description}set description(t){this._description=t}get moreDescription(){return this._moreDescription}set moreDescription(t){this._moreDescription=t}get data(){return this._data}set data(t){this._data=t}get output(){return this._output}set output(t){this._output=t}get scenario(){return this._scenario}set scenario(t){this._scenario=t}get isFolder(){return this._isFolder}set isFolder(t){this._isFolder=t}get apiTests(){return this._apiTests}set apiTests(t){this._apiTests=t}}const I=()=>{const{request:r}=U();return{listProjects:async()=>r({url:"/api-test/list-projects",method:"GET"}),indexApiTest:async()=>r({url:"/api-test/index",method:"GET"}),createApiTest:async o=>{const a=o.asDto(),p=m(a,new FormData),e=(await r({url:"/api-test/create",method:"POST",data:p})).apiTest;return new c(e)},updateApiTest:async o=>{const a=o.asDto(),p=m(a,new FormData),e=(await r({url:`/api-test/update?id=${a.UUID}`,method:"POST",data:p})).apiTest;return new c(e)},removeApiTest:async o=>{const a=new FormData;return o.forEach(p=>{a.append("UUIDs[]",p)}),await r({url:"/client-database/remove",method:"POST",data:a})}}};class F{_UUID;_projectCode;_projectName;_clientDatabases;constructor(t,n){this._UUID=t?.UUID??"",this._projectCode=t?.projectCode??"",this._projectName=t?.projectName??"",this._clientDatabases=n}get UUID(){return this._UUID}get projectCode(){return this._projectCode}get projectName(){return this._projectName}get clientDatabases(){return this._clientDatabases}}const O=()=>{const{listProjects:r,indexApiTest:t,createApiTest:n,updateApiTest:T,removeApiTest:h}=I();return{listProjects:async e=>u(async()=>{const s=await r(),i=s.rows.map(_=>{const A=_.clientDatabases.map(w=>new b(w));return new F(_,A)});return{...s,rows:i}},e),indexApiTest:async e=>u(async()=>{const s=await t(),i=s.rows.map(_=>new d(_));return{...s,rows:i}},e),createApiTest:async(e,s)=>{let i=new c(e);return i=await u(async()=>n(i),s),i.asViewModel()},updateApiTest:async(e,s)=>{let i=new c(e);return i=await u(async()=>T(i),s),i.asViewModel()},removeApiTest:async(e,s)=>await u(async()=>h(e),s)}};export{O as u};
