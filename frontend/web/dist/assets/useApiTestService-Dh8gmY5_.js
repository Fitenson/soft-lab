import{u as N}from"./useRequest-CGXdVgrd.js";import{a6 as U}from"./main-Bla8sumr.js";import{B as A}from"./BaseEntity-DGhPHkWu.js";import{a as b,A as j}from"./ApiTestViewModel-DcD3VQyO.js";import{h as d}from"./serviceHandler-BlQljMi1.js";import{C as I}from"./ClientDatabaseViewModel-CZz8IN5P.js";const g=["UUID","parentApiTest","clientDatabase","project","testName","transmission","description","isFolder","moreDescription"];function m(i,t){return U(i,g,t,"apiTest")}class l extends A{_UUID;_apiTest;_key;_value;_description;_enabled;_fieldType;_isNew;_apiTestDataDTO;constructor(t){super(t),this._UUID=t.UUID??"",this._apiTest=t.apiTest??"",this._key=t.key??"",this._value=t.value??"",this._description=t.description??"",this._enabled=Number(t.enabled),this._fieldType=btoa(t.fieldType??""),this._apiTestDataDTO=t,this._isNew=t.isNew??0}asViewModel(){return new b(this.asDto())}get UUID(){return this._UUID}set UUID(t){this._UUID=t}get apiTest(){return this._apiTest}set apiTest(t){this._apiTest=t}get key(){return this._key}set key(t){this._key=t}get value(){return this._value}set value(t){this._value=t}get description(){return this._description}set description(t){this._description=t}get enabled(){return Number(this._enabled)}set enabled(t){this._enabled=Number(t)}get fieldType(){return atob(this._fieldType)}set fieldType(t){this._fieldType=btoa(t)}get apiTestDataDTO(){return this._apiTestDataDTO}set apiTestDataDTO(t){this._apiTestDataDTO=t}get isNew(){return this._isNew}set isNew(t){this._isNew=t}}class _ extends A{_UUID;_parentApiTest;_clientDatabase;_project;_testName;_isFolder;_transmission;_description;_moreDescription;_apiTestHasDatas;_apiTests;_isNew;constructor(t){super(t),this._UUID=t.UUID??"",this._parentApiTest=t.parentApiTest??"",this._clientDatabase=t.clientDatabase??"",this._project=t.project??"",this._testName=t.testName??"",this._isFolder=Number(t.isFolder??0),this._transmission=t.transmission??"",this._description=t.description??"",this._moreDescription=t.moreDescription??"",this._apiTestHasDatas=(t.apiTestHasDatas??[]).map(p=>new l(p)),this._apiTests=(t.apiTests??[]).map(p=>new _(p)),this._isNew=t.isNew??!1}asViewModel(){return new j({UUID:this._UUID,parentApiTest:this._parentApiTest,clientDatabase:this._clientDatabase,project:this._project,testName:this._testName,isFolder:this._isFolder,isNew:this._isNew,transmission:this._transmission,description:this._description,moreDescription:this._moreDescription,apiTests:this._apiTests,apiTestHasDatas:this._apiTestHasDatas})}get UUID(){return this._UUID}set UUID(t){this._UUID=t}get parentApiTest(){return this._parentApiTest}set parentApiTest(t){this._parentApiTest=t}get clientDatabase(){return this._clientDatabase}set clientDatabase(t){this._clientDatabase=t}get project(){return this._project}set project(t){this._project=t}get testName(){return this._testName}set testName(t){this._testName=t}get transmission(){return this._transmission}set transmission(t){this._transmission=t}get description(){return this._description}set description(t){this._description=t}get moreDescription(){return this._moreDescription}set moreDescription(t){this._moreDescription=t}get isFolder(){return this._isFolder}set isFolder(t){this._isFolder=t}get apiTests(){return this._apiTests}set apiTests(t){this._apiTests=t}get apiTestHasDatas(){return this._apiTestHasDatas}set apiTestHasDatas(t){this._apiTestHasDatas=t}get isNew(){return this._isNew}set isNew(t){this._isNew=t}}const f=["UUID","apiTest","fieldType","key","value","enabled","description"];function v(i,t){const p=i.map(T=>({...T,UUID:T.isNew===1?"":T.UUID??""}));return U(p,f,t,"apiTestHasData")}const H=()=>{const{request:i}=N();return{listProjects:async()=>i({url:"/api-test/list-projects",method:"GET"}),indexApiTest:async()=>i({url:"/api-test/index",method:"GET"}),createApiTest:async({apiTestEntity:D,clientDatabaseToken:c})=>{const o=D.asDto(),h=m(o,new FormData),s=await i({url:"/api-test/create",method:"POST",data:h,headers:{"X-Client-Database-Token":c}}),r=s.apiTest,n=s.apiTestHasData,e=new _(r);return e.apiTestHasDatas=n.map(a=>new l(a)),e},updateApiTest:async({apiTestEntity:D,clientDatabaseToken:c})=>{const o=D.asDto(),h=m(o,new FormData);Array.isArray(o.apiTestHasDatas)&&o.apiTestHasDatas.length>0&&v(o.apiTestHasDatas,h);const s=await i({url:`/api-test/update?id=${o.UUID}`,method:"POST",data:h,headers:{"X-Client-Database-Token":c}}),r=s.apiTest,n=s.apiTestHasData,e=new _(r);return e.apiTestHasDatas=n.map(a=>new l(a)),e},removeApiTest:async D=>{const c=new FormData;return D.forEach(o=>{c.append("UUIDs[]",o)}),await i({url:"/api-test/remove",method:"POST",data:c})}}};class O{_UUID;_projectCode;_projectName;_clientDatabases;constructor(t,p){this._UUID=t?.UUID??"",this._projectCode=t?.projectCode??"",this._projectName=t?.projectName??"",this._clientDatabases=p}get UUID(){return this._UUID}get projectCode(){return this._projectCode}get projectName(){return this._projectName}get clientDatabases(){return this._clientDatabases}}const P=()=>{const{listProjects:i,indexApiTest:t,createApiTest:p,updateApiTest:T,removeApiTest:w}=H();return{listProjects:async s=>d(async()=>{const r=await i(),n=r.rows.map(e=>{const a=e.clientDatabases.map(u=>new I(u));return new O(e,a)});return{...r,rows:n}},s),indexApiTest:async s=>d(async()=>await t(),s),createApiTest:async({apiTestDTO:s,clientDatabaseToken:r},n)=>{let e=new _(s);return e=await d(async()=>p({apiTestEntity:e,clientDatabaseToken:r}),{onSuccess:a=>{const u=a.asViewModel();n?.onSuccess?.(u)},onError:a=>{n?.onError?.(a)}}),e.asViewModel()},updateApiTest:async({apiTestDTO:s,clientDatabaseToken:r},n)=>{let e=new _(s);return e=await d(async()=>T({apiTestEntity:e,clientDatabaseToken:r}),{onSuccess:a=>{const u=a.asViewModel();n?.onSuccess?.(u)},onError:a=>{n?.onError?.(a)}}),e.asViewModel()},removeApiTest:async(s,r)=>await d(async()=>w(s),r)}};export{P as u};
