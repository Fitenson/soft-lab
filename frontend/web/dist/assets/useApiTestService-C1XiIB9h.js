import{u as y}from"./useRequest-DsaQCMbn.js";import{a6 as U}from"./main-CCsm7npd.js";import{B as w}from"./BaseEntity-DGhPHkWu.js";import{a as b,A as g}from"./ApiTestViewModel-CRkjMY33.js";import{h}from"./serviceHandler-BlQljMi1.js";import{C as j}from"./ClientDatabaseViewModel-CZz8IN5P.js";const I=["UUID","parentApiTest","clientDatabase","project","testName","transmission","description","isFolder","moreDescription"];function m(e,t){return U(e,I,t,"apiTest")}class f extends w{_UUID;_apiTest;_key;_value;_description;_enabled;_fieldType;_apiTestDataDTO;constructor(t){super(t),this._UUID=t.UUID??"",this._apiTest=t.apiTest??"",this._key=t.key??"",this._value=t.value??"",this._description=t.description??"",this._enabled=t.enabled??1,this._fieldType=btoa(t.fieldType??""),this._apiTestDataDTO=t}asViewModel(){return new b(this.asDto())}get UUID(){return this._UUID}set UUID(t){this._UUID=t}get apiTest(){return this._apiTest}set apiTest(t){this._apiTest=t}get key(){return this._key}set key(t){this._key=t}get value(){return this._value}set value(t){this._value=t}get description(){return this._description}set description(t){this._description=t}get enabled(){return this._enabled}set enabled(t){this._enabled=t}get fieldType(){return atob(this._fieldType)}set fieldType(t){this._fieldType=btoa(t)}get apiTestDataDTO(){return this._apiTestDataDTO}set apiTestDataDTO(t){this._apiTestDataDTO=t}}class D extends w{_UUID;_parentApiTest;_clientDatabase;_project;_testName;_isFolder;_transmission;_description;_moreDescription;_apiTestData;_apiTests;_isNew;constructor(t){super(t),this._UUID=t.UUID??"",this._parentApiTest=t.parentApiTest??"",this._clientDatabase=t.clientDatabase??"",this._project=t.project??"",this._testName=t.testName??"",this._isFolder=Number(t.isFolder??0),this._transmission=t.transmission??"",this._description=t.description??"",this._moreDescription=t.moreDescription??"",this._apiTestData=(t.apiTestData??[]).map(o=>new f(o)),this._apiTests=(t.apiTests??[]).map(o=>new D(o)),this._isNew=t.isNew??!1}asViewModel(){return new g(this.asDto())}get UUID(){return this._UUID}set UUID(t){this._UUID=t}get parentApiTest(){return this._parentApiTest}set parentApiTest(t){this._parentApiTest=t}get clientDatabase(){return this._clientDatabase}set clientDatabase(t){this._clientDatabase=t}get project(){return this._project}set project(t){this._project=t}get testName(){return this._testName}set testName(t){this._testName=t}get transmission(){return this._transmission}set transmission(t){this._transmission=t}get description(){return this._description}set description(t){this._description=t}get moreDescription(){return this._moreDescription}set moreDescription(t){this._moreDescription=t}get isFolder(){return this._isFolder}set isFolder(t){this._isFolder=t}get apiTests(){return this._apiTests}set apiTests(t){this._apiTests=t}get apiTestData(){return this._apiTestData}set apiTestData(t){this._apiTestData=t}get isNew(){return this._isNew}set isNew(t){this._isNew=t}}const N=["UUID","apiTest","fieldType","key","value","enabled","description"];function v(e,t){return U(e,N,t,"apiTestHasData")}const O=()=>{const{request:e}=y();return{listProjects:async()=>e({url:"/api-test/list-projects",method:"GET"}),indexApiTest:async()=>e({url:"/api-test/index",method:"GET"}),createApiTest:async({apiTestEntity:T,clientDatabaseToken:p})=>{const i=T.asDto(),_=m(i,new FormData),s=(await e({url:"/api-test/create",method:"POST",data:_,headers:{"X-Client-Database-Token":p}})).apiTest;return new D(s)},updateApiTest:async({apiTestEntity:T,clientDatabaseToken:p})=>{const i=T.asDto(),_=m(i,new FormData);console.log("Repository: ",i.apiTestData),Array.isArray(i.apiTestData)&&i.apiTestData.length>0&&v(i.apiTestData,_);const s=(await e({url:`/api-test/update?id=${i.UUID}`,method:"POST",data:_,headers:{"X-Client-Database-Token":p}})).apiTest;return new D(s)},removeApiTest:async T=>{const p=new FormData;return T.forEach(i=>{p.append("UUIDs[]",i)}),await e({url:"/api-test/remove",method:"POST",data:p})}}};class F{_UUID;_projectCode;_projectName;_clientDatabases;constructor(t,o){this._UUID=t?.UUID??"",this._projectCode=t?.projectCode??"",this._projectName=t?.projectName??"",this._clientDatabases=o}get UUID(){return this._UUID}get projectCode(){return this._projectCode}get projectName(){return this._projectName}get clientDatabases(){return this._clientDatabases}}const S=()=>{const{listProjects:e,indexApiTest:t,createApiTest:o,updateApiTest:d,removeApiTest:l}=O();return{listProjects:async a=>h(async()=>{const s=await e(),c=s.rows.map(r=>{const n=r.clientDatabases.map(u=>new j(u));return new F(r,n)});return{...s,rows:c}},a),indexApiTest:async a=>h(async()=>await t(),a),createApiTest:async({apiTestDTO:a,clientDatabaseToken:s},c)=>{let r=new D(a);return r=await h(async()=>o({apiTestEntity:r,clientDatabaseToken:s}),{onSuccess:n=>{const u=n.asViewModel();c?.onSuccess?.(u)},onError:n=>{c?.onError?.(n)}}),r.asViewModel()},updateApiTest:async({apiTestDTO:a,clientDatabaseToken:s},c)=>{let r=new D(a);return r=await h(async()=>d({apiTestEntity:r,clientDatabaseToken:s}),{onSuccess:n=>{const u=n.asViewModel();c?.onSuccess?.(u)},onError:n=>{c?.onError?.(n)}}),r.asViewModel()},removeApiTest:async(a,s)=>await h(async()=>l(a),s)}};export{S as u};
