import{h as b}from"./serviceHandler-BlQljMi1.js";import{u as f}from"./useRequest-BoTLMqeD.js";import{a6 as v}from"./main-DY2sbF6P.js";import{B as S}from"./BaseEntity-DGhPHkWu.js";import{C as D}from"./ClientDatabaseViewModel-CZz8IN5P.js";import{C as U}from"./ClientDatabaseTableViewModel-CWID7VbN.js";const g=["UUID","host","port","databaseName","databaseSchema","username","password","project","valid"];function _(r,e){return v(r,g,e,"clientDatabase")}class u extends S{_UUID;_databaseName;_databaseSchema;_refreshToken;_host;_port;_username;_password;_project;_valid;constructor(e){super(e),this._UUID=e.UUID??"",this._databaseName=e.databaseName??"",this._databaseSchema=e.databaseSchema??"",this._refreshToken=e.refreshToken??"",this._host=e.host??"",this._port=e.port??"",this._username=e.username??"",this._password=e.password??"",this._project=e.project??"",this._valid=e.valid??!0}asViewModel(){return new D(this.asDto())}get UUID(){return this._UUID}set UUID(e){this._UUID=e}get databaseName(){return this._databaseName}set databaseName(e){this._databaseName=e}get databaseSchema(){return this._databaseSchema}set databaseSchema(e){this._databaseSchema=e}get refreshToken(){return this._refreshToken}set refreshToken(e){this._refreshToken=e}get host(){return this._host}set host(e){this._host=e}get port(){return this._port}set port(e){this._port=e}get username(){return this._username}set username(e){this._username=e}get password(){return this._password}set password(e){this._password=e}get project(){return this._project}set project(e){this._project=e}get valid(){return this._valid}set valid(e){this._valid=e}}const I=()=>{const{request:r}=f();return{indexClientDatabase:async()=>await r({url:"client-database/index",method:"GET"}),createClientDatabase:async a=>{const i=a.asDto(),n=_(i,new FormData),d=(await r({url:"/client-database/create",method:"POST",data:n})).clientDatabase;return new u(d)},updateClientDatabase:async a=>{const i=a.asDto(),n=_(i,new FormData),d=(await r({url:`/client-database/update?id=${i.UUID}`,method:"POST",data:n})).clientDatabase;return new u(d)},removeClientDatabase:async a=>{const i=new FormData;return a.forEach(n=>{i.append("UUIDs[]",n)}),await r({url:"/client-database/remove",method:"POST",data:i})},connectClientDatabase:async a=>await r({url:`/client-database/connect?id=${a}`,method:"GET"}),getTableList:async({params:a,clientDatabaseToken:i})=>{const n=new FormData;return n.append("param[offset]",a.offset),n.append("param[limit]",a.limit),n.append("param[sort]",a.sort),n.append("param[order]",a.order),await r({url:"/client-database/get-table-list",method:"POST",data:n,headers:{"X-Client-Database-Token":i}})}}},E=()=>{const{indexClientDatabase:r,createClientDatabase:e,updateClientDatabase:p,removeClientDatabase:h,connectClientDatabase:m,getTableList:w}=I();return{indexClientDatabase:async o=>b(async()=>{const t=await r(),s=t.rows.map(c=>new D(c));return{...t,rows:s}},o),createClientDatabase:async(o,t)=>{let s=new u(o);return s=await b(async()=>e(s),{...t,onSuccess:c=>{const l=c.asViewModel();t?.onSuccess?.(l)}}),s.asViewModel()},updateClientDatabase:async(o,t)=>{let s=new u(o);return s=await b(async()=>p(s),{...t,onSuccess:c=>{const l=c.asViewModel();t?.onSuccess?.(l)}}),s.asViewModel()},removeClientDatabase:async(o,t)=>await b(async()=>h(o),t),connectClientDatabase:async(o,t)=>{const s=await b(async()=>m(o),{...t,onSuccess:c=>{const l=new D(c);t?.onSuccess?.(l)}});return new D(s)},getTableList:async({params:o,clientDatabaseToken:t},{callbacks:s})=>b(async()=>{const c=await w({params:o,clientDatabaseToken:t}),l=c.rows.map(y=>new U(y));return{...c,rows:l}},s)}};export{E as u};
