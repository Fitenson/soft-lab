import{h as u}from"./serviceHandler-BlQljMi1.js";import{u as C}from"./useRequest-Dn5eizrh.js";import{N as U}from"./main-BXzwtDeA.js";import{B as v}from"./BaseEntity-DGhPHkWu.js";class l{_UUID;_databaseName;_databaseSchema;_refreshToken;_host;_port;_username;_password;_project;_projectName;_valid;constructor(e){this._UUID=e.UUID??"",this._databaseName=e.databaseName??"",this._databaseSchema=e.databaseSchema??"",this._refreshToken=e.refreshToken??"",this._host=e.host??"",this._port=e.port??"",this._username=e.username??"",this._password=e.password??"",this._project=e.project??"",this._projectName=e.projectName??"",this._valid=e.valid??!0}get UUID(){return this._UUID}get databaseName(){return this._databaseName}get databaseSchema(){return this._databaseSchema}get refreshToken(){return this._refreshToken}get host(){return this._host}get port(){return this._port}get username(){return this._username}get password(){return this._password}get project(){return this._project}get projectName(){return this._projectName}get valid(){return this._valid}}const S=["UUID","host","port","databaseName","databaseSchema","username","password","project","valid"];function p(s,e){return U(s,S,e,"clientDatabase")}class D extends v{_UUID;_databaseName;_databaseSchema;_refreshToken;_host;_port;_username;_password;_project;_valid;constructor(e){super(e),this._UUID=e.UUID??"",this._databaseName=e.databaseName??"",this._databaseSchema=e.databaseSchema??"",this._refreshToken=e.refreshToken??"",this._host=e.host??"",this._port=e.port??"",this._username=e.username??"",this._password=e.password??"",this._project=e.project??"",this._valid=e.valid??!0}asViewModel(){return new l(this.asDto())}get UUID(){return this._UUID}set UUID(e){this._UUID=e}get databaseName(){return this._databaseName}set databaseName(e){this._databaseName=e}get databaseSchema(){return this._databaseSchema}set databaseSchema(e){this._databaseSchema=e}get refreshToken(){return this._refreshToken}set refreshToken(e){this._refreshToken=e}get host(){return this._host}set host(e){this._host=e}get port(){return this._port}set port(e){this._port=e}get username(){return this._username}set username(e){this._username=e}get password(){return this._password}set password(e){this._password=e}get project(){return this._project}set project(e){this._project=e}get valid(){return this._valid}set valid(e){this._valid=e}}const f=()=>{const{request:s}=C();return{indexClientDatabase:async()=>await s({url:"client-database/index",method:"GET"}),createClientDatabase:async r=>{const o=r.asDto(),c=p(o,new FormData),t=(await s({url:"/client-database/create",method:"POST",data:c})).clientDatabase;return new D(t)},updateClientDatabase:async r=>{const o=r.asDto(),c=p(o,new FormData),t=(await s({url:`/client-database/update?id=${o.UUID}`,method:"POST",data:c})).clientDatabase;return new D(t)},removeClientDatabase:async r=>{const o=new FormData;return r.forEach(c=>{o.append("UUIDs[]",c)}),await s({url:"/client-database/remove",method:"POST",data:o})},connectClientDatabase:async r=>await s({url:`/client-database/connect?id=${r}`,method:"GET"})}},j=()=>{const{indexClientDatabase:s,createClientDatabase:e,updateClientDatabase:b,removeClientDatabase:d,connectClientDatabase:m}=f();return{indexClientDatabase:async t=>u(async()=>{const a=await s(),n=a.rows.map(i=>new l(i));return{...a,rows:n}},t),createClientDatabase:async(t,a)=>{let n=new D(t);return n=await u(async()=>e(n),{...a,onSuccess:i=>{const h=i.asViewModel();a?.onSuccess?.(h)}}),n.asViewModel()},updateClientDatabase:async(t,a)=>{let n=new D(t);return n=await u(async()=>b(n),{...a,onSuccess:i=>{const h=i.asViewModel();a?.onSuccess?.(h)}}),n.asViewModel()},removeClientDatabase:async(t,a)=>await u(async()=>d(t),a),connectClientDatabase:async(t,a)=>{const n=await u(async()=>m(t),{...a,onSuccess:i=>{const h=new l(i);a?.onSuccess?.(h)}});return new l(n)}}};export{l as C,j as u};
