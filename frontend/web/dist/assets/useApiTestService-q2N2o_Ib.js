import{u as w}from"./useRequest-BCPBbhvs.js";import{a4 as U,C as j}from"./main-kEuqEnnc.js";import{B as y}from"./BaseEntity-DGhPHkWu.js";import{A as b}from"./ApiTestViewModel-DgxPnehm.js";import{h as D}from"./serviceHandler-BlQljMi1.js";const I=["UUID","parentApiTest","clientDatabase","project","testName","transmission","description","isFolder","moreDescription"];function l(i,t){return U(i,I,t,"apiTest")}class u extends y{_UUID;_parentApiTest;_clientDatabase;_project;_testName;_isFolder;_transmission;_description;_moreDescription;_apiTests;constructor(t){super(t),this._UUID=t.UUID??"",this._parentApiTest=t.parentApiTest??"",this._clientDatabase=t.clientDatabase??"",this._project=t.project??"",this._testName=t.testName??"",this._isFolder=Number(t.isFolder??0),this._transmission=t.transmission??"",this._description=t.description??"",this._moreDescription=t.moreDescription??"",this._apiTests=(t.apiTests??[]).map(p=>new u(p))}asViewModel(){return new b(this.asDto())}get UUID(){return this._UUID}set UUID(t){this._UUID=t}get parentApiTest(){return this._parentApiTest}set parentApiTest(t){this._parentApiTest=t}get clientDatabase(){return this._clientDatabase}set clientDatabase(t){this._clientDatabase=t}get project(){return this._project}set project(t){this._project=t}get testName(){return this._testName}set testName(t){this._testName=t}get transmission(){return this._transmission}set transmission(t){this._transmission=t}get description(){return this._description}set description(t){this._description=t}get moreDescription(){return this._moreDescription}set moreDescription(t){this._moreDescription=t}get isFolder(){return this._isFolder}set isFolder(t){this._isFolder=t}get apiTests(){return this._apiTests}set apiTests(t){this._apiTests=t}}const g=()=>{const{request:i}=w();return{listProjects:async()=>i({url:"/api-test/list-projects",method:"GET"}),indexApiTest:async()=>i({url:"/api-test/index",method:"GET"}),createApiTest:async(c,a)=>{const T=c.asDto(),m=l(T,new FormData),s=(await i({url:"/api-test/create",method:"POST",data:m,headers:{"X-Client-Database-Token":a}})).apiTest;return new u(s)},updateApiTest:async c=>{const a=c.asDto(),T=l(a,new FormData),e=(await i({url:`/api-test/update?id=${a.UUID}`,method:"POST",data:T})).apiTest;return new u(e)},removeApiTest:async c=>{const a=new FormData;return c.forEach(T=>{a.append("UUIDs[]",T)}),await i({url:"/api-test/remove",method:"POST",data:a})}}};class N{_UUID;_projectCode;_projectName;_clientDatabases;constructor(t,p){this._UUID=t?.UUID??"",this._projectCode=t?.projectCode??"",this._projectName=t?.projectName??"",this._clientDatabases=p}get UUID(){return this._UUID}get projectCode(){return this._projectCode}get projectName(){return this._projectName}get clientDatabases(){return this._clientDatabases}}const P=()=>{const{listProjects:i,indexApiTest:t,createApiTest:p,updateApiTest:h,removeApiTest:d}=g();return{listProjects:async e=>D(async()=>{const s=await i(),n=s.rows.map(r=>{const o=r.clientDatabases.map(_=>new j(_));return new N(r,o)});return{...s,rows:n}},e),indexApiTest:async e=>D(async()=>await t(),e),createApiTest:async(e,s,n)=>{let r=new u(e);return r=await D(async()=>p(r,s),{onSuccess:o=>{const _=o.asViewModel();n?.onSuccess?.(_)},onError:o=>{n?.onError?.(o)}}),r.asViewModel()},updateApiTest:async(e,s)=>{let n=new u(e);return n=await D(async()=>h(n),{onSuccess:r=>{const o=r.asViewModel();s?.onSuccess?.(o)},onError:r=>{s?.onError?.(r)}}),n.asViewModel()},removeApiTest:async(e,s)=>await D(async()=>d(e),s)}};export{P as u};
