import{u as U}from"./useRequest-BXt9U2Id.js";import{a2 as j,C as y}from"./main-CNqnZwXU.js";import{B as b}from"./BaseEntity-DGhPHkWu.js";import{A}from"./ApiTestViewModel-DgxPnehm.js";import{h as m}from"./serviceHandler-BlQljMi1.js";const I=["UUID","parentApiTest","clientDatabase","project","testName","transmission","description","isFolder","moreDescription"];function l(r,t){return j(r,I,t,"apiTest")}class u extends b{_UUID;_parentApiTest;_clientDatabase;_project;_testName;_isFolder;_transmission;_description;_moreDescription;_apiTests;constructor(t){super(t),this._UUID=t.UUID??"",this._parentApiTest=t.parentApiTest??"",this._clientDatabase=t.clientDatabase??"",this._project=t.project??"",this._testName=t.testName??"",this._isFolder=Number(t.isFolder??0),this._transmission=t.transmission??"",this._description=t.description??"",this._moreDescription=t.moreDescription??"",this._apiTests=(t.apiTests??[]).map(p=>new u(p))}asViewModel(){return new A(this.asDto())}get UUID(){return this._UUID}set UUID(t){this._UUID=t}get parentApiTest(){return this._parentApiTest}set parentApiTest(t){this._parentApiTest=t}get clientDatabase(){return this._clientDatabase}set clientDatabase(t){this._clientDatabase=t}get project(){return this._project}set project(t){this._project=t}get testName(){return this._testName}set testName(t){this._testName=t}get transmission(){return this._transmission}set transmission(t){this._transmission=t}get description(){return this._description}set description(t){this._description=t}get moreDescription(){return this._moreDescription}set moreDescription(t){this._moreDescription=t}get isFolder(){return this._isFolder}set isFolder(t){this._isFolder=t}get apiTests(){return this._apiTests}set apiTests(t){this._apiTests=t}}const g=()=>{const{request:r}=U();return{listProjects:async()=>r({url:"/api-test/list-projects",method:"GET"}),indexApiTest:async()=>r({url:"/api-test/index",method:"GET"}),createApiTest:async(c,n)=>{const T=c.asDto(),D=l(T,new FormData),e=(await r({url:"/api-test/create",method:"POST",data:D,headers:{"X-Client-Database-Token":n}})).apiTest;return new u(e)},updateApiTest:async c=>{const n=c.asDto(),T=l(n,new FormData),s=(await r({url:`/api-test/update?id=${n.UUID}`,method:"POST",data:T})).apiTest;return new u(s)},removeApiTest:async c=>{const n=new FormData;return c.forEach(T=>{n.append("UUIDs[]",T)}),await r({url:"/api-test/remove",method:"POST",data:n})}}};class N{_UUID;_projectCode;_projectName;_clientDatabases;constructor(t,p){this._UUID=t?.UUID??"",this._projectCode=t?.projectCode??"",this._projectName=t?.projectName??"",this._clientDatabases=p}get UUID(){return this._UUID}get projectCode(){return this._projectCode}get projectName(){return this._projectName}get clientDatabases(){return this._clientDatabases}}const P=()=>{const{listProjects:r,indexApiTest:t,createApiTest:p,updateApiTest:h,removeApiTest:d}=g();return{listProjects:async s=>m(async()=>{const e=await r(),a=e.rows.map(i=>{const o=i.clientDatabases.map(_=>new y(_));return new N(i,o)});return{...e,rows:a}},s),indexApiTest:async s=>m(async()=>{const e=await t(),a=e.rows.map(i=>new A(i));return{...e,rows:a}},s),createApiTest:async(s,e,a)=>{let i=new u(s);return i=await m(async()=>p(i,e),{onSuccess:o=>{const _=o.asViewModel();a?.onSuccess?.(_)},onError:o=>{a?.onError?.(o)}}),i.asViewModel()},updateApiTest:async(s,e)=>{let a=new u(s);return a=await m(async()=>h(a),{onSuccess:i=>{const o=i.asViewModel();e?.onSuccess?.(o)},onError:i=>{e?.onError?.(i)}}),a.asViewModel()},removeApiTest:async(s,e)=>await m(async()=>d(s),e)}};export{P as u};
