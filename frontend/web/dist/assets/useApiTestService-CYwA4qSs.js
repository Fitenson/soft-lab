import{u as w}from"./useRequest-7n1J7GxQ.js";import{$ as g,C as j}from"./main-D2F9KyVn.js";import{B as b}from"./BaseEntity-DGhPHkWu.js";import{h}from"./serviceHandler-BlQljMi1.js";class T{_UUID;_parentApiTest;_clientDatabase;_project;_isFolder;_testName;_transmission;_description;_moreDescription;_data;_output;_scenario;_apiTests;_apiDTO;constructor(t){this._UUID=t.UUID??"",this._parentApiTest=t.parentApiTest??"",this._clientDatabase=t.clientDatabase??"",this._project=t.project??"",this._testName=t.testName??"",this._transmission=t.transmission??"",this._isFolder=t.isFolder??0,this._description=t.description??"",this._moreDescription=t.moreDescription??"",this._data=t.data??"",this._output=t.output??"",this._scenario=t.scenario??"",this._apiTests=(t.apiTests??[]).map(a=>new T(a)),this._apiDTO=t}get UUID(){return this._UUID}get parentApiTest(){return this._parentApiTest}get clientDatabase(){return this._clientDatabase}get project(){return this._project}get testName(){return this._testName}get transmission(){return this._transmission}get description(){return this._description}get moreDescription(){return this._moreDescription}get data(){return this._data}get output(){return this._output}get scenario(){return this._scenario}get isFolder(){return this._isFolder}get apiTests(){return this._apiTests}get apiDTO(){return this._apiDTO}}const y=["UUID","parentApiTest","clientDatabase","project","testName","transmission","description","isFolder","moreDescription","data","output","scenario"];function A(r,t){return g(r,y,t,"apiTest")}class u extends b{_UUID;_parentApiTest;_clientDatabase;_project;_testName;_isFolder;_transmission;_description;_moreDescription;_data;_output;_scenario;_apiTests;constructor(t){super(t),this._UUID=t.UUID??"",this._parentApiTest=t.parentApiTest??"",this._clientDatabase=t.clientDatabase??"",this._project=t.project??"",this._testName=t.testName??"",this._isFolder=t.isFolder??0,this._transmission=t.transmission??"",this._description=t.description??"",this._moreDescription=t.moreDescription??"",this._data=t.data??"",this._output=t.output??"",this._scenario=t.scenario??"",this._apiTests=(t.apiTests??[]).map(a=>new u(a))}asViewModel(){return new T(this.asDto())}get UUID(){return this._UUID}set UUID(t){this._UUID=t}get parentApiTest(){return this._parentApiTest}set parentApiTest(t){this._parentApiTest=t}get clientDatabase(){return this._clientDatabase}set clientDatabase(t){this._clientDatabase=t}get project(){return this._project}set project(t){this._project=t}get testName(){return this._testName}set testName(t){this._testName=t}get transmission(){return this._transmission}set transmission(t){this._transmission=t}get description(){return this._description}set description(t){this._description=t}get moreDescription(){return this._moreDescription}set moreDescription(t){this._moreDescription=t}get data(){return this._data}set data(t){this._data=t}get output(){return this._output}set output(t){this._output=t}get scenario(){return this._scenario}set scenario(t){this._scenario=t}get isFolder(){return this._isFolder}set isFolder(t){this._isFolder=t}get apiTests(){return this._apiTests}set apiTests(t){this._apiTests=t}}const I=()=>{const{request:r}=w();return{listProjects:async()=>r({url:"/api-test/list-projects",method:"GET"}),indexApiTest:async()=>r({url:"/api-test/index",method:"GET"}),createApiTest:async(c,o)=>{const _=c.asDto(),D=A(_,new FormData),e=(await r({url:"/api-test/create",method:"POST",data:D,headers:{"X-Client-Database-Token":o}})).apiTest;return new u(e)},updateApiTest:async c=>{const o=c.asDto(),_=A(o,new FormData),s=(await r({url:`/api-test/update?id=${o.UUID}`,method:"POST",data:_})).apiTest;return new u(s)},removeApiTest:async c=>{const o=new FormData;return c.forEach(_=>{o.append("UUIDs[]",_)}),await r({url:"/client-database/remove",method:"POST",data:o})}}};class F{_UUID;_projectCode;_projectName;_clientDatabases;constructor(t,a){this._UUID=t?.UUID??"",this._projectCode=t?.projectCode??"",this._projectName=t?.projectName??"",this._clientDatabases=a}get UUID(){return this._UUID}get projectCode(){return this._projectCode}get projectName(){return this._projectName}get clientDatabases(){return this._clientDatabases}}const M=()=>{const{listProjects:r,indexApiTest:t,createApiTest:a,updateApiTest:d,removeApiTest:l}=I();return{listProjects:async s=>h(async()=>{const e=await r(),n=e.rows.map(i=>{const p=i.clientDatabases.map(m=>new j(m));return new F(i,p)});return{...e,rows:n}},s),indexApiTest:async s=>h(async()=>{const e=await t(),n=e.rows.map(i=>new T(i));return{...e,rows:n}},s),createApiTest:async(s,e,n)=>{let i=new u(s);return i=await h(async()=>a(i,e),{onSuccess:p=>{const m=p.asViewModel();n?.onSuccess?.(m)},onError:p=>{n?.onError?.(p)}}),i.asViewModel()},updateApiTest:async(s,e)=>{let n=new u(s);return n=await h(async()=>d(n),{onSuccess:i=>{const p=i.asViewModel();e?.onSuccess?.(p)},onError:i=>{e?.onError?.(i)}}),n.asViewModel()},removeApiTest:async(s,e)=>await h(async()=>l(s),e)}};export{T as A,M as u};
