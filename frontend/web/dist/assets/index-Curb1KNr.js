import{N as w,j as c,H as g}from"./main-BXzwtDeA.js";import{A as b}from"./app-layout-DOb-IrSg.js";import y from"./api-test-layout-DGBAqchM.js";import{u as I}from"./useQuery-SGKY2fCU.js";import f from"./project-card-COSURzLo.js";import{u as N}from"./useRequest-Dn5eizrh.js";import{B as F}from"./BaseEntity-DGhPHkWu.js";import{h as u}from"./serviceHandler-BlQljMi1.js";import{C as x}from"./useClientDatabaseService-DGRbonOo.js";import"./button-k-xgee9R.js";import"./index-DYNnjt5q.js";import"./index-BLiG9MfF.js";import"./x-DFXUYbsT.js";import"./createLucideIcon-C3_XqGXy.js";import"./useAppSelector-CWtigi5R.js";import"./chevron-right-D8865Ohx.js";import"./dropdown-menu-_32ZllXC.js";import"./useAuthState-BR6rloRE.js";import"./index-CJ8QssSR.js";import"./card-CcLwlkRl.js";import"./use-show-toast-0j2jRmqF.js";const P=["UUID","parentApiTest","clientDatabase","project","testName","transmission","description","isFolder","moreDescription","data","output","scenario"];function D(e,t){return w(e,P,t,"apiTest")}class T{_UUID;_parentApiTest;_clientDatabase;_project;_isFolder;_testName;_transmission;_description;_moreDescription;_data;_output;_scenario;constructor(t){this._UUID=t.UUID??"",this._parentApiTest=t.parentApiTest??"",this._clientDatabase=t.clientDatabase??"",this._project=t.project??"",this._testName=t.testName??"",this._transmission=t.transmission??"",this._isFolder=t.isFolder??!1,this._description=t.description??"",this._moreDescription=t.moreDescription??"",this._data=t.data??"",this._output=t.output??"",this._scenario=t.scenario??""}get UUID(){return this._UUID}get parentApiTest(){return this._parentApiTest}get clientDatabase(){return this._clientDatabase}get project(){return this._project}get testName(){return this._testName}get transmission(){return this._transmission}get description(){return this._description}get moreDescription(){return this._moreDescription}get data(){return this._data}get output(){return this._output}get scenario(){return this._scenario}get isFolder(){return this._isFolder}}class h extends F{_UUID;_parentApiTest;_clientDatabase;_project;_testName;_isFolder;_transmission;_description;_moreDescription;_data;_output;_scenario;constructor(t){super(t),this._UUID=t.UUID??"",this._parentApiTest=t.parentApiTest??"",this._clientDatabase=t.clientDatabase??"",this._project=t.project??"",this._testName=t.testName??"",this._isFolder=t.isFolder??!1,this._transmission=t.transmission??"",this._description=t.description??"",this._moreDescription=t.moreDescription??"",this._data=t.data??"",this._output=t.output??"",this._scenario=t.scenario??""}asViewModel(){return new T(this.asDto())}get UUID(){return this._UUID}set UUID(t){this._UUID=t}get parentApiTest(){return this._parentApiTest}set parentApiTest(t){this._parentApiTest=t}get clientDatabase(){return this._clientDatabase}set clientDatabase(t){this._clientDatabase=t}get project(){return this._project}set project(t){this._project=t}get testName(){return this._testName}set testName(t){this._testName=t}get transmission(){return this._transmission}set transmission(t){this._transmission=t}get description(){return this._description}set description(t){this._description=t}get moreDescription(){return this._moreDescription}set moreDescription(t){this._moreDescription=t}get data(){return this._data}set data(t){this._data=t}get output(){return this._output}set output(t){this._output=t}get scenario(){return this._scenario}set scenario(t){this._scenario=t}get isFolder(){return this._isFolder}set isFolder(t){this._isFolder=t}}const C=()=>{const{request:e}=N();return{listProjects:async()=>e({url:"/api-test/list-projects",method:"GET"}),indexApiTest:async()=>e({url:"/api-test/index",method:"GET"}),createApiTest:async o=>{const a=o.asDto(),p=D(a,new FormData),s=(await e({url:"/api-test/create",method:"POST",data:p})).apiTest;return new h(s)},updateApiTest:async o=>{const a=o.asDto(),p=D(a,new FormData),s=(await e({url:`/api-test/update?id=${a.UUID}`,method:"POST",data:p})).apiTest;return new h(s)},removeApiTest:async o=>{const a=new FormData;return o.forEach(p=>{a.append("UUIDs[]",p)}),await e({url:"/client-database/remove",method:"POST",data:a})}}};class v{_UUID;_projectCode;_projectName;_clientDatabases;constructor(t,n){this._UUID=t?.UUID??"",this._projectCode=t?.projectCode??"",this._projectName=t?.projectName??"",this._clientDatabases=n}get UUID(){return this._UUID}get projectCode(){return this._projectCode}get projectName(){return this._projectName}get clientDatabases(){return this._clientDatabases}}const E=()=>{const{listProjects:e,indexApiTest:t,createApiTest:n,updateApiTest:_,removeApiTest:d}=C();return{listProjects:async s=>u(async()=>{const i=await e(),r=i.rows.map(m=>{const j=m.clientDatabases.map(U=>new x(U));return new v(m,j)});return{...i,rows:r}},s),indexApiTest:async s=>u(async()=>{const i=await t(),r=i.rows.map(m=>new T(m));return{...i,rows:r}},s),createApiTest:async(s,i)=>{let r=new h(s);return r=await u(async()=>n(r),i),r.asViewModel()},updateApiTest:async(s,i)=>{let r=new h(s);return r=await u(async()=>_(r),i),r.asViewModel()},removeApiTest:async(s,i)=>await u(async()=>d(s),i)}};function et(){const e=[{title:"Backend",href:"/backend"},{title:"API Test Case",href:"/backend/api-test"}],{listProjects:t}=E(),{data:n}=I({queryKey:["/backend/api-test/list-projects"],queryFn:()=>t(),enabled:!0});return c.jsxs(b,{breadcrumbs:e,children:[c.jsx(g,{title:"API Test Case"}),c.jsx(y,{children:c.jsx("div",{className:"w-full h-full grid grid-cols-6 grid-rows-3",children:n?.rows?.map(_=>c.jsx(f,{projectViewModel:_}))})})]})}export{et as default};
